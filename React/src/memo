**1
useRef는 새로운 reference객체를 만드는 기능인데, useState와 흡사하지만 리렌더링을 유발하지 않는다는 점에서 차이가 있음
고로 리렌더링의 유발을 원치않을 때 useRef를 사용하면 좋을 것.

**2
 const onChange = (e) => {
    setInput({ ...input, [e.target.name]: e.target.value });
  };

여러개의 이벤트 핸들러 함수를 하나로 뭉칠 때 state의 내부 객체값을 동적으로 변수처럼 쓸때 괄호 않에 넣으면 동적으로 key값을 바꾸면서 이벤트 발생가능

**3
useRef대신 그냥 js의 변수를 사용해서 카운트하면 컴포넌트가 리렌더링 됐을때 코드가 재시작되며 기존 선언한 값으로 고정되고 변동이 없다는 점
위를 해결하기 위해 컴포넌트 밖에서 js변수를 사용하게 된다고 하더라도 같은 App.jsx Register 컴포넌트를 두 개 이상 사용하게 될 경우 서로 변수를
공유하기 때문에 치명적인 오류로 이어짐
=> 리렌더링 되지않으며 간단한 카운팅작업은 useRef를 사용하라

**4